# args: location, pack_item_ls

# a location is a dictionary item that includes:
#   number of storage spaces,
#   array of storage space dims,
#   type of package storage space accepts
#   location of storage facility

# e.g. { 3, [(5,5,5),(5,5,5),(5,5,5)], [('Custom Crate', 'Cardboard Box', 'Taco Shell')], altanta }

# a pack_item_ls is generated by the pack.py file
# it is a dictionary containing all pack items and their information

# a pack_item_ls is a dictionary item that includes:
#   ~ see pack.py for the dict item structure

# returns: dictionary of all the items that will fit best into each approritate 
# storage location


# dev env

import pack

i = pack.item_ls('../DATA/jan_pack.xlsx')
dic = i.ls_xml()

# end dev env

# actual dependecies
from utils import append_location_info



location = {}
location['location 1'] = ( 3, [(5,5,5),(5,5,5),(5,5,5)], ['Custom Crate', 'Cardboard Box', 'Taco Shell', 'Slipcase', 'slipcase'], 'Big Blue' )


class storage_spaces():

    def __init__(self, location, pack_item_ls):

        self.location = location
        self.pack_item_ls = pack_item_ls
    

    # check to make sure the packages are all supposed to be going to the same place
    def in_right_location(self):

        right_location = {}
        wrong_location = {}

        storage_facility = self.location['location 1'][3]
        
        for k, v in self.pack_item_ls.items():
            if v[6] == storage_facility:
                #print(k + 'is in the right location')
                right_location[k] = v
                item = v
                item2 = append_location_info(v, self.location['location 1'][2])

            else:
                #print(k +' is in ' + v[6] + ' instead of in ' + storage_facility)
                wrong_location[k] = v

        return storage_facility



    # split the packages by packing type
    #def pack_types():
    #    pass
    # assign packages to their correct location
    #def assign_location():
    #    pass

i = storage_spaces(location, dic)
dic = i.in_right_location()
print(dic, 'is the storage_facility')